// Ahmad Aldasouqi
// CS 223C
// Recaman Sequence

// TODO:
// make iterative not print nums

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_LEN 256

bool contains(int *array, int len, int contain) {
  for (int idx = 0; idx < len; idx++) {
    if (array[idx] == contain) {
      return true;
    }
  }
  return false;
}

int recaman_iterative(int number) {

  int array[number];
  array[0] = 0;
  int prev;

  printf("The first %d elements of the sequence are: ", number);

  for (int idx = 0; idx < number; idx++) {
    if (idx == 0) {
      printf("0 ");
      continue;
    }
    prev = array[idx - 1];
    if ((prev - idx) > 0 && !contains(array, idx, prev - idx)) {
      array[idx] = prev - idx;
    } else {
      array[idx] = prev + idx;
    }
    printf("%d ", array[idx]);
  }
  printf("\n");
  return number;
}

static int cache[MAX_LEN];
int recaman_recursive(int number);

int recaman_recursive_wrapper(int number) {
  if (number == 0) {
    return 0;
  } else if (cache[number]) {
    return cache[number];
  }
  int result = recaman_recursive(number);
  cache[number] = result;
  return result;
}

int recaman_recursive(int number) {
  int prev = recaman_recursive_wrapper(number - 1);
  if (((prev - number) > 0) && !contains(cache, number, prev - number)) {
    return prev - number;
  }
  return prev + number;
}

int main(int argc, char *argv[]) {

  int number;

  // Catch incorrect arguments.
  if (argc != 3) {
    printf("Incorrect usage. run function with 2 arguments.\n");
    return 1;
  }
  if (!(number = atoi(argv[2]))) {
    printf("Expected integer in second argument. \n");
    return 1;
  }
  if (!(number > 0 && number < MAX_LEN)) {
    printf("Expected integer in range [1, %d]. \n", MAX_LEN);
    return 1;
  }

  // run function
  if (*argv[1] == 'i') {
    printf("Running iterative recaman function. \n");
    recaman_iterative(number);
    return 0;
  } else if (*argv[1] == 'r') {

    printf("Running recursive recaman function. \n");

    printf("The first %d elements of the sequence are: ", number);
    recaman_recursive_wrapper(number);

    for (int i = 0; i < number; i++) {
      printf("%d ", cache[i]);
    }
    printf("\n");

    return 0;
  }

  printf("First argument must be 'i' or 'r' \n");
  return 1;
}
